{"version":3,"sources":["webpack:///./node_modules/regenerator-runtime/runtime.js"],"names":["global","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","inModule","module","runtime","regeneratorRuntime","exports","wrap","ContinueSentinel","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","call","Gp","GeneratorFunctionPrototype","Generator","create","GeneratorFunction","constructor","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","arg","__await","defineIteratorMethods","AsyncIterator","async","innerFn","outerFn","self","tryLocsList","iter","next","then","result","done","value","toString","keys","object","key","push","reverse","length","pop","Context","reset","skipTempReset","prev","sent","_sent","undefined","delegate","method","tryEntries","forEach","resetTryEntry","charAt","isNaN","slice","stop","rootRecord","completion","type","rval","dispatchException","exception","context","handle","loc","caught","record","i","entry","tryLoc","hasCatch","hasFinally","catchLoc","finallyLoc","Error","abrupt","finallyEntry","complete","afterLoc","finish","thrown","delegateYield","iterable","resultName","nextLoc","protoGenerator","generator","_invoke","state","doneResult","delegateResult","maybeInvokeDelegate","tryCatch","makeInvokeMethod","fn","obj","err","previousPromise","callInvokeWithMethodAndArg","Promise","resolve","reject","invoke","unwrapped","return","TypeError","info","pushTryEntry","locs","iteratorMethod","Function"],"mappings":"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","file":"js/npm.regenerator-runtime.a4e854df.js","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() { return this })() || Function(\"return this\")()\n);\n"],"sourceRoot":""}